#include "Tetromino.h"
#include "Grid.h"
#include "utils.h"

#include <stdio.h>
#include <limits.h> // for CHAR_BIT
#include <assert.h>
#include <stdlib.h>

const unsigned int Tetromino::COLOR=COLOR_RGB(0, 64, 0);
const float Tetromino::DEPTH=0.5;

// these numbers are generated by function formatBlockString()
const unsigned int Tetromino::BLOCKS[Tetromino::BLOCK_NB]=
{
    0x0660,
    0x2222,
    0x4460,
    0x2260,
    0x0720,
    0x0360,
    0x0c60,
};

static const unsigned int PALLETE[]=
{
//	COLOR_RGB(  0,   0,   0), // background
	COLOR_RGB(  0,   0, 255),
	COLOR_RGB(  0, 255,   0),
	COLOR_RGB(  0, 255, 255),
	COLOR_RGB(255,   0,   0),
	COLOR_RGB(255,   0, 255),
	COLOR_RGB(255, 255,   0),
	COLOR_RGB(255,   0, 255),
//	COLOR_RGB(0x58, 0x24, 0x91), // grid
};

Tetromino::Tetromino()
{
	assert(ORDER*ORDER<=sizeof(unsigned int)*CHAR_BIT);

	reload();
}

Tetromino::Tetromino(Block block)
{
	assert(ORDER*ORDER<=sizeof(unsigned int)*CHAR_BIT);
	assert(0<=block && block<BLOCK_NB);

	reload();
	this->block=block;
}

void Tetromino::reload()
{
	block=static_cast<Block>(random()%BLOCK_NB);
	pivot=random()&3; // %4, there are 4 directions
	
	// gravity="center_horizontal|top"
	setPosition((Grid::WIDTH-ORDER)>>1, Grid::HEIGHT-1);
	
	assert(BLOCK_NB<=ARRAY_SIZE(PALLETE));
	int index=static_cast<int>(random()%ARRAY_SIZE(PALLETE)/*block*/);
	color=PALLETE[index];
}

bool Tetromino::map(int x, int y) const
{
	assert(0<=x && x<ORDER);
	assert(0<=y && y<ORDER);

/*
	Cartesian coordinates in two dimension

		     ^                ^
	  (3-y,x)|   1<-------0   |(x,y)
		<----+   |        ^   +---->
		         | rotate |
		<----+   V        |   +---->
	(3-x,3-y)|   2------->3   |(y,3-x)
		     V                V

	pivot  xy  coordinate
	  0    ^>  (x,y)
	  1    <^  (3-y,x)
	  2    V<  (3-x,3-y)
	  3    >V  (y,3-x)

*/

	int x0=x, y0=y;
	switch(pivot)
	{
	case 0: x0=x;   y0=y;   break;
	case 1: x0=y;   y0=3-x; break;
	case 2: x0=3-x; y0=3-y; break;
	case 3: x0=3-y; y0=x;   break;
	}

/*
	+-+-+-+-+
	|C|D|E|F|
	+-+-+-+-+
	|8|9|A|B|
	+-+-+-+-+
	|4|5|6|7|
	+-+-+-+-+
	|0|1|2|3|
	+-+-+-+-+

	(x,y) => (y<<2)+x
*/
	unsigned int test_bit=1u<<((y0*ORDER)+x0);

	return BLOCKS[block] & test_bit;
}

void Tetromino::draw(const int side) const
{
	
	glColor4ubv(reinterpret_cast<const GLubyte*>(&color));

	glBegin(GL_QUADS);
	for(int j=0; j<ORDER; ++j)
	for(int i=0; i<ORDER; ++i)
	{
		if(map(i, j))
		{
			int x1=(x+i)*(side+1)+1;
			int y1=(y+j)*(side+1)+1;
			int x2=x1+side;
			int y2=y1+side;

			glVertex2i(x1, y1);
			glVertex2i(x2, y1);
			glVertex2i(x2, y2);
			glVertex2i(x1, y2);
		}
	}
	glEnd();
}
